{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\CD\\\\Components\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport \"./App.module.css\";\nconst minuteSeconds = 1;\nconst hourSeconds = 1;\nconst daySeconds = 86400;\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dimension\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nconst getTimeSeconds = time => minuteSeconds - time / 1000 | 0;\n\nconst getTimeMinutes = time => time % hourSeconds / minuteSeconds | 0;\n\nconst getTimeHours = time => time % daySeconds / hourSeconds | 0;\n\nconst getTimeDays = time => time / daySeconds | 0;\n\nexport default function App() {\n  const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\n\n  const endTime = stratTime + 243248; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(CountdownCircleTimer, _objectSpread(_objectSpread({}, timerProps), {}, {\n      colors: [[\"#7E2E84\"]],\n      duration: daysDuration,\n      initialRemainingTime: remainingTime,\n      children: ({\n        elapsedTime\n      }) => renderTime(\"days\", getTimeDays(daysDuration - elapsedTime / 1000))\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, _objectSpread(_objectSpread({}, timerProps), {}, {\n      colors: [[\"#D14081\"]],\n      duration: daySeconds,\n      initialRemainingTime: remainingTime % daySeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > hourSeconds],\n      children: ({\n        elapsedTime\n      }) => renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime / 1000))\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, _objectSpread(_objectSpread({}, timerProps), {}, {\n      colors: [[\"#EF798A\"]],\n      duration: hourSeconds,\n      initialRemainingTime: remainingTime % hourSeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > minuteSeconds],\n      children: ({\n        elapsedTime\n      }) => renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime / 1000))\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, _objectSpread(_objectSpread({}, timerProps), {}, {\n      colors: [[\"#218380\"]],\n      duration: minuteSeconds,\n      initialRemainingTime: remainingTime % minuteSeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > 0],\n      children: ({\n        elapsedTime\n      }) => renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Master/Desktop/CD/Components/App.js"],"names":["React","CountdownCircleTimer","minuteSeconds","hourSeconds","daySeconds","timerProps","isPlaying","size","strokeWidth","renderTime","dimension","time","getTimeSeconds","getTimeMinutes","getTimeHours","getTimeDays","App","stratTime","Date","now","endTime","remainingTime","days","Math","ceil","daysDuration","elapsedTime","totalElapsedTime"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport \"./App.module.css\";\r\n\r\nconst minuteSeconds = 1;\r\nconst hourSeconds = 1;\r\nconst daySeconds = 86400;\r\n\r\nconst timerProps = {\r\n  isPlaying: true,\r\n  size: 120,\r\n  strokeWidth: 6,\r\n};\r\n\r\nconst renderTime = (dimension, time) => {\r\n  return (\r\n    <div className=\"time-wrapper\">\r\n      <div className=\"time\">{time}</div>\r\n      <div>{dimension}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getTimeSeconds = (time) => (minuteSeconds - time / 1000) | 0;\r\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\r\nconst getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0;\r\nconst getTimeDays = (time) => (time / daySeconds) | 0;\r\n\r\nexport default function App() {\r\n  const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\r\n  const endTime = stratTime + 243248; // use UNIX timestamp in seconds\r\n\r\n  const remainingTime = endTime - stratTime;\r\n  const days = Math.ceil(remainingTime / daySeconds);\r\n  const daysDuration = days * daySeconds;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#7E2E84\"]]}\r\n        duration={daysDuration}\r\n        initialRemainingTime={remainingTime}\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\"days\", getTimeDays(daysDuration - elapsedTime / 1000))\r\n        }\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#D14081\"]]}\r\n        duration={daySeconds}\r\n        initialRemainingTime={remainingTime % daySeconds}\r\n        onComplete={(totalElapsedTime) => [\r\n          remainingTime - totalElapsedTime > hourSeconds,\r\n        ]}\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime / 1000))\r\n        }\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#EF798A\"]]}\r\n        duration={hourSeconds}\r\n        initialRemainingTime={remainingTime % hourSeconds}\r\n        onComplete={(totalElapsedTime) => [\r\n          remainingTime - totalElapsedTime > minuteSeconds,\r\n        ]}\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\r\n            \"minutes\",\r\n            getTimeMinutes(hourSeconds - elapsedTime / 1000)\r\n          )\r\n        }\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#218380\"]]}\r\n        duration={minuteSeconds}\r\n        initialRemainingTime={remainingTime % minuteSeconds}\r\n        onComplete={(totalElapsedTime) => [\r\n          remainingTime - totalElapsedTime > 0,\r\n        ]}\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\r\n        }\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}