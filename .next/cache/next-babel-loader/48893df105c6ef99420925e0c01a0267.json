{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\CD\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport \"./index.module.css\";\n\nvar renderTime = function renderTime(_ref) {\n  _s();\n\n  var remainingTime = _ref.remainingTime;\n  var currentTime = useRef(remainingTime);\n  var prevTime = useRef(null);\n  var isNewTimeFirstTick = useRef(false);\n\n  var _useState = useState(0),\n      setOneLastRerender = _useState[1];\n\n  if (currentTime.current !== remainingTime) {\n    isNewTimeFirstTick.current = true;\n    prevTime.current = currentTime.current;\n    currentTime.current = remainingTime;\n  } else {\n    isNewTimeFirstTick.current = false;\n  } // force one last re-render when the time is over to tirgger the last animation\n\n\n  if (remainingTime === 0) {\n    setTimeout(function () {\n      setOneLastRerender(function (val) {\n        return val + 1;\n      });\n    }, 20);\n  }\n\n  var isTimeUp = isNewTimeFirstTick.current;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time \".concat(isTimeUp ? \"up\" : \"\"),\n      children: remainingTime\n    }, remainingTime, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, _this), prevTime.current !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time \".concat(!isTimeUp ? \"down\" : \"\"),\n      children: prevTime.current\n    }, prevTime.current, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(renderTime, \"snYL9PGsXbRKmeF8yyEL1YKiHHg=\");\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"CountdownCircleTimer\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), \"React Component\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n        isPlaying: true,\n        duration: 10,\n        colors: [[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]],\n        children: renderTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 69,\n  columnNumber: 17\n}, this), rootElement);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Master/Desktop/CD/pages/index.js"],"names":["React","useRef","useState","ReactDOM","CountdownCircleTimer","renderTime","remainingTime","currentTime","prevTime","isNewTimeFirstTick","setOneLastRerender","current","setTimeout","val","isTimeUp","App","rootElement","document","getElementById","render"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,oBAAT,QAAqC,8BAArC;AAEA,OAAO,oBAAP;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAuB;AAAA;;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AACxC,MAAMC,WAAW,GAAGN,MAAM,CAACK,aAAD,CAA1B;AACA,MAAME,QAAQ,GAAGP,MAAM,CAAC,IAAD,CAAvB;AACA,MAAMQ,kBAAkB,GAAGR,MAAM,CAAC,KAAD,CAAjC;;AAHwC,kBAITC,QAAQ,CAAC,CAAD,CAJC;AAAA,MAI/BQ,kBAJ+B;;AAMxC,MAAIH,WAAW,CAACI,OAAZ,KAAwBL,aAA5B,EAA2C;AACzCG,IAAAA,kBAAkB,CAACE,OAAnB,GAA6B,IAA7B;AACAH,IAAAA,QAAQ,CAACG,OAAT,GAAmBJ,WAAW,CAACI,OAA/B;AACAJ,IAAAA,WAAW,CAACI,OAAZ,GAAsBL,aAAtB;AACD,GAJD,MAIO;AACLG,IAAAA,kBAAkB,CAACE,OAAnB,GAA6B,KAA7B;AACD,GAZuC,CAcxC;;;AACA,MAAIL,aAAa,KAAK,CAAtB,EAAyB;AACvBM,IAAAA,UAAU,CAAC,YAAM;AACfF,MAAAA,kBAAkB,CAAC,UAAAG,GAAG;AAAA,eAAIA,GAAG,GAAG,CAAV;AAAA,OAAJ,CAAlB;AACD,KAFS,EAEP,EAFO,CAAV;AAGD;;AAED,MAAMC,QAAQ,GAAGL,kBAAkB,CAACE,OAApC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAyB,MAAA,SAAS,iBAAUG,QAAQ,GAAG,IAAH,GAAU,EAA5B,CAAlC;AAAA,gBACGR;AADH,OAAUA,aAAV;AAAA;AAAA;AAAA;AAAA,aADF,EAIGE,QAAQ,CAACG,OAAT,KAAqB,IAArB,iBACC;AAEE,MAAA,SAAS,iBAAU,CAACG,QAAD,GAAY,MAAZ,GAAqB,EAA/B,CAFX;AAAA,gBAIGN,QAAQ,CAACG;AAJZ,OACOH,QAAQ,CAACG,OADhB;AAAA;AAAA;AAAA;AAAA,aALJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAeD,CAtCD;;GAAMN,U;;AAwCN,SAASU,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,sDAEE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACE,QAAC,oBAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,QAAQ,EAAE,EAFZ;AAGE,QAAA,MAAM,EAAE,CAAC,CAAC,SAAD,EAAY,IAAZ,CAAD,EAAoB,CAAC,SAAD,EAAY,IAAZ,CAApB,EAAuC,CAAC,SAAD,CAAvC,CAHV;AAAA,kBAKGV;AALH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;KAnBQU,G;AAqBT,IAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAf,QAAQ,CAACgB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBH,WAAzB","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\n\r\nimport \"./index.module.css\";\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  const currentTime = useRef(remainingTime);\r\n  const prevTime = useRef(null);\r\n  const isNewTimeFirstTick = useRef(false);\r\n  const [, setOneLastRerender] = useState(0);\r\n\r\n  if (currentTime.current !== remainingTime) {\r\n    isNewTimeFirstTick.current = true;\r\n    prevTime.current = currentTime.current;\r\n    currentTime.current = remainingTime;\r\n  } else {\r\n    isNewTimeFirstTick.current = false;\r\n  }\r\n\r\n  // force one last re-render when the time is over to tirgger the last animation\r\n  if (remainingTime === 0) {\r\n    setTimeout(() => {\r\n      setOneLastRerender(val => val + 1);\r\n    }, 20);\r\n  }\r\n\r\n  const isTimeUp = isNewTimeFirstTick.current;\r\n\r\n  return (\r\n    <div className=\"time-wrapper\">\r\n      <div key={remainingTime} className={`time ${isTimeUp ? \"up\" : \"\"}`}>\r\n        {remainingTime}\r\n      </div>\r\n      {prevTime.current !== null && (\r\n        <div\r\n          key={prevTime.current}\r\n          className={`time ${!isTimeUp ? \"down\" : \"\"}`}\r\n        >\r\n          {prevTime.current}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>\r\n        CountdownCircleTimer\r\n        <br />\r\n        React Component\r\n      </h1>\r\n      <div className=\"timer-wrapper\">\r\n        <CountdownCircleTimer\r\n          isPlaying\r\n          duration={10}\r\n          colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n        >\r\n          {renderTime}\r\n        </CountdownCircleTimer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"]},"metadata":{},"sourceType":"module"}